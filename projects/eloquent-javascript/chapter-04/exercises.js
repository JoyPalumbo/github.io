////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function range(start, end, step = start < end ? 1 : -1) {
  let result = [];
  for (let i = start; step > 0 ? i <= end : i >= end; i += step) {
    result.push(i);
  }
  if(start === end) {
    return [];
  }
  return result;
}
// function range(num1, num2, step) {
//   let sum = [];
//   if(num1 === num2){
//     return [];
//   }
//   // if(num1 < 0 || num2 < 0) {
//   //   return [];
//   // }
//   for(var i = num1; i <= num2; i++) {
//     sum.push(i);
//   }
//   return sum;
// }

//passing answer ask about step
// function range(start, end, step = start < end ? 1 : -1) {
//   let array = [];

//   if (step > 0) {
//     for (let i = start; i <= end; i += step) array.push(i);
//   } else {
//     for (let i = start; i >= end; i += step) array.push(i);
//   }
//   return array;
// }
////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(numArray) {
  let num = 0;
  // if(numArray.length === 0) {
  //   return numArray;
  // }
  for(let value of numArray) {
  // for(var i = 0; i < numArray.length; i++) {
    // if(numArray[i] < numArray.length) {
    //   num++;
    // }
    num += value;
  }
  return num;
}

//WHY FOR IN LOOP INSTEAD OF FOR LOOP?

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
// return array.reverse();
let revArr = [];
for(var i = 0; i < array.length; i++) {
  revArr.unshift(array[i]);
}
 return revArr;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  // let revArr = [];
  for(var i = 0; i < Math.floor(array.length / 2); i++) {
    // revArr.push(array.length - 1);
    var temp = array[i];
    array[i] = array[array.length - 1 - i];
    array[array.length - 1 - i] = temp;
  }
return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
let arrList = null;
  for(var i = array.length -1; i >= 0; i--){
  arrList = {value: array[i], rest: arrList};
  }
  return arrList;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  let arr = [];
  for(let node = list; node; node = node.rest) {
    arr.push(node.value);
  }
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
return {value, rest:list};
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
  if (!list) {
  return undefined;
  }
  else if (n == 0) {
    return list.value;
  }
  else {
    return nth(list.rest, n - 1);
  }
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(a, b) {
  // if (a === b) {
  //   return true;
  // }
  
   if (a != null && b != null && typeof a == "object" && typeof b == "object") {
    for (let prop in a) {
      if (!(prop in b) || !deepEqual(a[prop], b[prop])) return false;
    }
    return true;
  } else {
    return a === b;
  }
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
